##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.6.0] date: [Wed Mar 18 10:42:20 YEKT 2020]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
# ------------------------------------------------

######################################
# target
######################################
TARGET = F103C8_health_check

SHELL = /bin/bash

######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og
# platform
ARCH := $(shell uname -m)
SYS := $(shell uname -s)

#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

######################################
# source
######################################
# C sources
C_SOURCES =  \
$(wildcard Core/Src/*.c) \
$(wildcard Periph/Src/*.c) \
$(wildcard Srv/Src/*.c) \
$(wildcard FreeRTOS-Kernel/*.c) \
$(wildcard FreeRTOS-Kernel/portable/GCC/ARM_CM3/*.c) \
FreeRTOS-Kernel/portable/MemMang/heap_4.c

# ASM sources
ASM_SOURCES =  \
startup_stm32f103xb.s \
$(wildcard Core/*.s) \
$(wildcard Periph/*.s) \
$(wildcard Srv/*.s)

# ASMM sources
ASMM_SOURCES = \
$(wildcard Core/*.S) \
$(wildcard Periph/*.S) \
$(wildcard Srv/*.S)


#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m3

# fpu
# NONE for Cortex-M0/M0+/M3

# float-abi


# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# C defines
C_DEFS =  \
-DHSE_VALUE=8000000 \
-DHSE_STARTUP_TIMEOUT=100 \
-DLSE_STARTUP_TIMEOUT=5000 \
-DLSE_VALUE=32768 \
-DHSI_VALUE=8000000 \
-DLSI_VALUE=40000 \
-DVDD_VALUE=3300 \
-DPREFETCH_ENABLE=1 \
-DSTM32F103xB \
-DUSE_FULL_ASSERT

# AS defines
AS_DEFS = $(C_DEFS) \
-D__ASSEMBLER__

# C includes
C_INCLUDES =  \
-ICore/Inc \
-IPeriph/Inc \
-ISrv/Inc \
-IDrivers/STM32F10x_StdPeriph_Driver/inc \
-IDrivers/CMSIS/Device/ST/STM32F1xx/Include \
-IDrivers/CMSIS/Include \
-IFreeRTOS-Kernel/include \
-IFreeRTOS-Kernel/portable/GCC/ARM_CM3 \

# AS includes
AS_INCLUDES = $(C_INCLUDES)

# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
# CFLAGS += -g -gdwarf-2 -D CMAKE_CXX_FLAGS_RELEASE="-Wa,-mimplicit-it=thumb"
# CFLAGS += -g -gdwarf-2 -Wextra -pedantic
CFLAGS += -g -gdwarf-2 -DDEBUG
ASFLAGS += -g -gdwarf-2 -DDEBUG
endif

ifeq ($(SYS), Darwin)
CFLAGS += -DSWO_ITM=0
ASFLAGS += -DSWO_ITM=0
else ifeq ($(SYS), Linux)
CFLAGS += -DSWO_USART=USART1
ASFLAGS += -DSWO_USART=USART1
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = stm32f103c8tx_flash.ld

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASMM_SOURCES:.S=.O)))
vpath %.S $(sort $(dir $(ASMM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/%.O: %.S Makefile | $(BUILD_DIR)
	$(AS) -c $(ASFLAGS) -E $< -o $@
	$(AS) -c $(ASFLAGS) $@ -o $@.o
	mv $@.o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir $@		

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
  
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***